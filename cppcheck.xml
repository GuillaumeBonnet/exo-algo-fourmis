<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="1.64"/>
    <errors>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;villeSuiv&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;villeSuiv&amp;#039; is reassigned a value before the old one has been used.">
            <location file="algorithmeGeneral.c" line="54"/>
            <location file="algorithmeGeneral.c" line="55"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;iFourmi&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;iFourmi&amp;#039; is assigned a value that is never used.">
            <location file="algorithmeGeneral.c" line="29"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;villeSuiv&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;villeSuiv&amp;#039; is reassigned a value before the old one has been used.">
            <location file="algorithmeGeneral_test.c" line="50"/>
            <location file="algorithmeGeneral_test.c" line="52"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;p&amp;#039; is reassigned a value before the old one has been used.">
            <location file="fonctionsPrincipales.c" line="15"/>
            <location file="fonctionsPrincipales.c" line="23"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="liste.c" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="listeArc.c" line="98"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="listeArcP.c" line="94"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="listeSommet.c" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;q&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;q&amp;#039; is assigned a value that is never used.">
            <location file="listeSommet.c" line="9"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="listeSommetP.c" line="95"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;q&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;q&amp;#039; is assigned a value that is never used.">
            <location file="listeSommetP.c" line="9"/>
        </error>
        <error id="redundantAssignment" severity="performance" msg="Variable &amp;#039;villeSuiv&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;villeSuiv&amp;#039; is reassigned a value before the old one has been used.">
            <location file="main_fourmis_elitistes.c" line="54"/>
            <location file="main_fourmis_elitistes.c" line="55"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fichier - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: fichier - otherwise it is redundant to check it against null.">
            <location file="readGraph.c" line="15"/>
            <location file="readGraph.c" line="11"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fichier - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: fichier - otherwise it is redundant to check it against null.">
            <location file="readGraph.c" line="27"/>
            <location file="readGraph.c" line="23"/>
        </error>
        <error id="nullPointer" severity="warning" msg="Possible null pointer dereference: fichier - otherwise it is redundant to check it against null." verbose="Possible null pointer dereference: fichier - otherwise it is redundant to check it against null.">
            <location file="readGraph.c" line="93"/>
            <location file="readGraph.c" line="89"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;arc&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;arc&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="readGraph.c" line="111"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: nbArrete" verbose="Unused variable: nbArrete">
            <location file="readGraph.c" line="92"/>
        </error>
        <error id="invalidscanf" severity="warning" msg="scanf without field width limits can crash with huge input data." verbose="scanf without field width limits can crash with huge input data. Add a field width specifier to fix this problem:&#10;    %s =&amp;gt; %20s&#10;&#10;Sample program that can crash:&#10;&#10;#include &amp;lt;stdio.h&amp;gt;&#10;int main()&#10;{&#10;    char c[5];&#10;    scanf(&amp;quot;%s&amp;quot;, c);&#10;    return 0;&#10;}&#10;&#10;To make it crash, type in more than 5 characters.">
            <location file="readGraph.c" line="101"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fichier" verbose="Resource leak: fichier">
            <location file="readGraph.c" line="72"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: arc" verbose="Memory leak: arc">
            <location file="readGraph.c" line="117"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tab&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tab&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level.">
            <location file="readGraph_test.c" line="78"/>
        </error>
        <error id="fflushOnInputStream" severity="error" msg="fflush() called on input stream &amp;#039;stdin&amp;#039; results in undefined behaviour." verbose="fflush() called on input stream &amp;#039;stdin&amp;#039; results in undefined behaviour.">
            <location file="readGraph_test.c" line="82"/>
        </error>
        <error id="fflushOnInputStream" severity="error" msg="fflush() called on input stream &amp;#039;stdin&amp;#039; results in undefined behaviour." verbose="fflush() called on input stream &amp;#039;stdin&amp;#039; results in undefined behaviour.">
            <location file="readGraph_test.c" line="83"/>
        </error>
    </errors>
</results>
